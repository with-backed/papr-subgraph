type LendingStrategy @entity {
  id: ID!
  createdAt: BigInt!
  poolAddress: Bytes!
  underlying: Bytes!
  debtToken: Bytes!
  norm: BigInt!
  vaults: [Vault!] @derivedFrom(field: "strategy")
  allowedCollateral: [AllowedCollateral!]! @derivedFrom(field: "strategy")
  normUpdates: [NormalizationUpdate!] @derivedFrom(field: "strategy")
}

type Vault @entity {
  id: ID!
  strategy: LendingStrategy!
  debt: BigInt!
  totalCollateralValue: BigInt!
  collateral: [VaultCollateral!]! @derivedFrom(field: "vault")
}

type NormalizationUpdate @entity {
  id: ID!
  timestamp: BigInt!
  strategy: LendingStrategy!
  newNorm: BigInt!
  txHash: Bytes!
}

type VaultCollateral @entity {
  id: ID!
  contractAddress: Bytes!
  tokenId: BigInt!
  value: BigInt!
  vault: Vault
  symbol: String!
}

type AllowedCollateral @entity {
  id: ID!
  contractAddress: Bytes!
  strategy: LendingStrategy
  allowed: Boolean!
}

type AddCollateralEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  strategy: LendingStrategy!
  collateral: VaultCollateral!
  txHash: Bytes!
}

type RemoveCollateralEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  strategy: LendingStrategy!
  collateral: VaultCollateral!
  txHash: Bytes!
}

type DebtIncreasedEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  strategy: LendingStrategy!
  amount: BigInt!
  txHash: Bytes!
}

type DebtDecreasedEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  strategy: LendingStrategy!
  amount: BigInt!
  txHash: Bytes!
}

type CollateralAllowedChangeEvent @entity {
  id: ID!
  timestamp: BigInt!
  collateralAddress: Bytes!
  strategy: LendingStrategy!
  allowed: Boolean!
  txHash: Bytes!
}
