type PaprController @entity {
  id: ID!
  createdAt: BigInt!
  # TODO watch for update pool address events
  poolAddress: Bytes!
  underlying: ERC20Token!
  paprToken: ERC20Token!
  token0IsUnderlying: Boolean!
  maxLTV: BigInt!
  target: BigInt!
  vaults: [Vault!] @derivedFrom(field: "controller")
  allowedCollateral: [AllowedCollateral!]! @derivedFrom(field: "controller")
  targetUpdates: [TargetUpdate!] @derivedFrom(field: "controller")
}

type Vault @entity {
  id: ID!
  account: Bytes!
  token: ERC721Token!
  controller: PaprController!
  debt: BigInt!
  debtPerCollateral: BigInt!
  collateral: [VaultCollateral!]! @derivedFrom(field: "vault")
  collateralCount: Int!
}

type TargetUpdate @entity {
  id: ID!
  timestamp: BigInt!
  newTarget: BigInt!
  controller: PaprController!
}

type VaultCollateral @entity {
  id: ID!
  tokenId: BigInt!
  vault: Vault
}

type ERC20Token @entity {
  # id = contract address
  id: ID!,
  symbol: String!
  name: String!
  decimals: Int!
}

type ERC721Token @entity {
  # id = contract address
  id: ID!,
  symbol: String!
  name: String!
}

type AllowedCollateral @entity {
  id: ID!
  token: ERC721Token!
  controller: PaprController!
  allowed: Boolean!
}

type AddCollateralEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  controller: PaprController!
  account: Bytes!
  collateral: VaultCollateral!
}

type RemoveCollateralEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  controller: PaprController!
  account: Bytes!
  collateral: VaultCollateral!
}

type DebtIncreasedEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  controller: PaprController!
  account: Bytes!
  amount: BigInt!
}

type DebtDecreasedEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  controller: PaprController!
  account: Bytes!
  amount: BigInt!
}

type Auction @entity {
  id: ID!
  startedBy: Bytes!
  endPrice: BigInt
  vault: Vault!
  nftOwner: Bytes!
  controller: PaprController!
  start: AuctionStartEvent! @derivedFrom(field: "auction")
  end: AuctionEndEvent @derivedFrom(field: "auction")
  # below are in event
  auctionAssetID: BigInt!
  auctionAssetContract: ERC721Token!
  perPeriodDecayPercentWad: BigInt!
  secondsInPeriod: BigInt!
  startPrice: BigInt!
  paymentAsset: ERC20Token!
}

type AuctionStartEvent @entity {
  id: ID!
  timestamp: Int!
  auction: Auction!
  account: Bytes!
  controller: PaprController!
}

type AuctionEndEvent @entity {
  id: ID!
  timestamp: Int!
  auction: Auction!
  # the owner of the NFT
  account: Bytes!
  controller: PaprController!
}

type CollateralAllowedChangeEvent @entity {
  id: ID!
  timestamp: BigInt!
  collateralAddress: Bytes!
  controller: PaprController!
  allowed: Boolean!
}
