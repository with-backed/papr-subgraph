type LendingStrategy @entity {
  id: ID!
  createdAt: BigInt!
  name: String!
  symbol: String!
  poolAddress: Bytes!
  underlying: Bytes!
  targetAPR: BigInt!
  allowedCollateralRoot: Bytes!
  strategyURI: String!
  norm: BigInt!
  vaults: [Vault!] @derivedFrom(field: "strategy")
  normUpdates: [NormalizationUpdate!] @derivedFrom(field: "strategy")
}

type Account @entity {
  id: ID!
  vaults: [Vault!] @derivedFrom(field: "owner")
}

type Vault @entity {
  id: ID!
  nonce: BigInt!
  strategy: LendingStrategy!
  owner: Account!
  tokenId: BigInt!
  debt: BigInt!
  totalCollateralValue: BigInt!
  collateral: [Collateral!]! @derivedFrom(field: "vault")
}

type NormalizationUpdate @entity {
  id: ID!
  timestamp: BigInt!
  strategy: LendingStrategy!
  newNorm: BigInt!
}

type Collateral @entity {
  id: ID!
  contractAddress: Bytes!
  tokenId: BigInt!
  value: BigInt!
  vault: Vault
}

type AddCollateralEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  strategy: LendingStrategy!
  collateral: Collateral!
}

type RemoveCollateralEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  strategy: LendingStrategy!
  collateral: Collateral!
}

type DebtIncreasedEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  strategy: LendingStrategy!
  amount: BigInt!
}

type DebtDecreasedEvent @entity {
  id: ID!
  timestamp: BigInt!
  vault: Vault!
  strategy: LendingStrategy!
  amount: BigInt!
}
