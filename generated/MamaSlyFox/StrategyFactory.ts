// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LendingStrategyCreated extends ethereum.Event {
  get params(): LendingStrategyCreated__Params {
    return new LendingStrategyCreated__Params(this);
  }
}

export class LendingStrategyCreated__Params {
  _event: LendingStrategyCreated;

  constructor(event: LendingStrategyCreated) {
    this._event = event;
  }

  get strategyAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get underlying(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class StrategyFactory extends ethereum.SmartContract {
  static bind(address: Address): StrategyFactory {
    return new StrategyFactory("StrategyFactory", address);
  }

  newStrategy(
    name: string,
    symbol: string,
    collateral: Address,
    underlying: Address
  ): Address {
    let result = super.call(
      "newStrategy",
      "newStrategy(string,string,address,address):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(collateral),
        ethereum.Value.fromAddress(underlying)
      ]
    );

    return result[0].toAddress();
  }

  try_newStrategy(
    name: string,
    symbol: string,
    collateral: Address,
    underlying: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newStrategy",
      "newStrategy(string,string,address,address):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(collateral),
        ethereum.Value.fromAddress(underlying)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class NewStrategyCall extends ethereum.Call {
  get inputs(): NewStrategyCall__Inputs {
    return new NewStrategyCall__Inputs(this);
  }

  get outputs(): NewStrategyCall__Outputs {
    return new NewStrategyCall__Outputs(this);
  }
}

export class NewStrategyCall__Inputs {
  _call: NewStrategyCall;

  constructor(call: NewStrategyCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get collateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get underlying(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class NewStrategyCall__Outputs {
  _call: NewStrategyCall;

  constructor(call: NewStrategyCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
