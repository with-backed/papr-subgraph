// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreateLendingStrategy extends ethereum.Event {
  get params(): CreateLendingStrategy__Params {
    return new CreateLendingStrategy__Params(this);
  }
}

export class CreateLendingStrategy__Params {
  _event: CreateLendingStrategy;

  constructor(event: CreateLendingStrategy) {
    this._event = event;
  }

  get strategyAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allowedCollateralRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get underlying(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[4].value.toString();
  }

  get allowedCollateralURI(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class StrategyFactory__parametersResult {
  value0: string;
  value1: string;
  value2: string;
  value3: Bytes;
  value4: BigInt;
  value5: BigInt;
  value6: Address;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: Bytes,
    value4: BigInt,
    value5: BigInt,
    value6: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    return map;
  }
}

export class StrategyFactory extends ethereum.SmartContract {
  static bind(address: Address): StrategyFactory {
    return new StrategyFactory("StrategyFactory", address);
  }

  newStrategy(
    name: string,
    symbol: string,
    strategyURI: string,
    allowedCollateralRoot: Bytes,
    targetAPR: BigInt,
    maxLTV: BigInt,
    underlying: Address
  ): Address {
    let result = super.call(
      "newStrategy",
      "newStrategy(string,string,string,bytes32,uint256,uint256,address):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromString(strategyURI),
        ethereum.Value.fromFixedBytes(allowedCollateralRoot),
        ethereum.Value.fromUnsignedBigInt(targetAPR),
        ethereum.Value.fromUnsignedBigInt(maxLTV),
        ethereum.Value.fromAddress(underlying)
      ]
    );

    return result[0].toAddress();
  }

  try_newStrategy(
    name: string,
    symbol: string,
    strategyURI: string,
    allowedCollateralRoot: Bytes,
    targetAPR: BigInt,
    maxLTV: BigInt,
    underlying: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newStrategy",
      "newStrategy(string,string,string,bytes32,uint256,uint256,address):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromString(strategyURI),
        ethereum.Value.fromFixedBytes(allowedCollateralRoot),
        ethereum.Value.fromUnsignedBigInt(targetAPR),
        ethereum.Value.fromUnsignedBigInt(maxLTV),
        ethereum.Value.fromAddress(underlying)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  parameters(): StrategyFactory__parametersResult {
    let result = super.call(
      "parameters",
      "parameters():(string,string,string,bytes32,uint256,uint256,address)",
      []
    );

    return new StrategyFactory__parametersResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBytes(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress()
    );
  }

  try_parameters(): ethereum.CallResult<StrategyFactory__parametersResult> {
    let result = super.tryCall(
      "parameters",
      "parameters():(string,string,string,bytes32,uint256,uint256,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StrategyFactory__parametersResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBytes(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress()
      )
    );
  }
}

export class NewStrategyCall extends ethereum.Call {
  get inputs(): NewStrategyCall__Inputs {
    return new NewStrategyCall__Inputs(this);
  }

  get outputs(): NewStrategyCall__Outputs {
    return new NewStrategyCall__Outputs(this);
  }
}

export class NewStrategyCall__Inputs {
  _call: NewStrategyCall;

  constructor(call: NewStrategyCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get strategyURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get allowedCollateralRoot(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get targetAPR(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get maxLTV(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get underlying(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class NewStrategyCall__Outputs {
  _call: NewStrategyCall;

  constructor(call: NewStrategyCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
