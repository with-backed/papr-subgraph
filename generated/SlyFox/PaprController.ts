// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCollateral extends ethereum.Event {
  get params(): AddCollateral__Params {
    return new AddCollateral__Params(this);
  }
}

export class AddCollateral__Params {
  _event: AddCollateral;

  constructor(event: AddCollateral) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateralAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AllowCollateral extends ethereum.Event {
  get params(): AllowCollateral__Params {
    return new AllowCollateral__Params(this);
  }
}

export class AllowCollateral__Params {
  _event: AllowCollateral;

  constructor(event: AllowCollateral) {
    this._event = event;
  }

  get collateral(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAllowed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class CancelProposedAllowedCollateral extends ethereum.Event {
  get params(): CancelProposedAllowedCollateral__Params {
    return new CancelProposedAllowedCollateral__Params(this);
  }
}

export class CancelProposedAllowedCollateral__Params {
  _event: CancelProposedAllowedCollateral;

  constructor(event: CancelProposedAllowedCollateral) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EndAuction extends ethereum.Event {
  get params(): EndAuction__Params {
    return new EndAuction__Params(this);
  }
}

export class EndAuction__Params {
  _event: EndAuction;

  constructor(event: EndAuction) {
    this._event = event;
  }

  get auctionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IncreaseDebt extends ethereum.Event {
  get params(): IncreaseDebt__Params {
    return new IncreaseDebt__Params(this);
  }
}

export class IncreaseDebt__Params {
  _event: IncreaseDebt;

  constructor(event: IncreaseDebt) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateralAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferStarted extends ethereum.Event {
  get params(): OwnershipTransferStarted__Params {
    return new OwnershipTransferStarted__Params(this);
  }
}

export class OwnershipTransferStarted__Params {
  _event: OwnershipTransferStarted;

  constructor(event: OwnershipTransferStarted) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposeAllowedCollateral extends ethereum.Event {
  get params(): ProposeAllowedCollateral__Params {
    return new ProposeAllowedCollateral__Params(this);
  }
}

export class ProposeAllowedCollateral__Params {
  _event: ProposeAllowedCollateral;

  constructor(event: ProposeAllowedCollateral) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReduceDebt extends ethereum.Event {
  get params(): ReduceDebt__Params {
    return new ReduceDebt__Params(this);
  }
}

export class ReduceDebt__Params {
  _event: ReduceDebt;

  constructor(event: ReduceDebt) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateralAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RemoveCollateral extends ethereum.Event {
  get params(): RemoveCollateral__Params {
    return new RemoveCollateral__Params(this);
  }
}

export class RemoveCollateral__Params {
  _event: RemoveCollateral;

  constructor(event: RemoveCollateral) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateralAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetAuctionCreatorDiscount extends ethereum.Event {
  get params(): SetAuctionCreatorDiscount__Params {
    return new SetAuctionCreatorDiscount__Params(this);
  }
}

export class SetAuctionCreatorDiscount__Params {
  _event: SetAuctionCreatorDiscount;

  constructor(event: SetAuctionCreatorDiscount) {
    this._event = event;
  }

  get discount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetFundingPeriod extends ethereum.Event {
  get params(): SetFundingPeriod__Params {
    return new SetFundingPeriod__Params(this);
  }
}

export class SetFundingPeriod__Params {
  _event: SetFundingPeriod;

  constructor(event: SetFundingPeriod) {
    this._event = event;
  }

  get fundingPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetPool extends ethereum.Event {
  get params(): SetPool__Params {
    return new SetPool__Params(this);
  }
}

export class SetPool__Params {
  _event: SetPool;

  constructor(event: SetPool) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StartAuction extends ethereum.Event {
  get params(): StartAuction__Params {
    return new StartAuction__Params(this);
  }
}

export class StartAuction__Params {
  _event: StartAuction;

  constructor(event: StartAuction) {
    this._event = event;
  }

  get auctionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auctionAssetID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get auctionAssetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nftOwner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get startPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get paymentAsset(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class UpdateFundingPeriod extends ethereum.Event {
  get params(): UpdateFundingPeriod__Params {
    return new UpdateFundingPeriod__Params(this);
  }
}

export class UpdateFundingPeriod__Params {
  _event: UpdateFundingPeriod;

  constructor(event: UpdateFundingPeriod) {
    this._event = event;
  }

  get newPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatePool extends ethereum.Event {
  get params(): UpdatePool__Params {
    return new UpdatePool__Params(this);
  }
}

export class UpdatePool__Params {
  _event: UpdatePool;

  constructor(event: UpdatePool) {
    this._event = event;
  }

  get newPool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateTarget extends ethereum.Event {
  get params(): UpdateTarget__Params {
    return new UpdateTarget__Params(this);
  }
}

export class UpdateTarget__Params {
  _event: UpdateTarget;

  constructor(event: UpdateTarget) {
    this._event = event;
  }

  get newTarget(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PaprController__auctionCurrentPriceInputAuctionStruct extends ethereum.Tuple {
  get nftOwner(): Address {
    return this[0].toAddress();
  }

  get auctionAssetID(): BigInt {
    return this[1].toBigInt();
  }

  get auctionAssetContract(): Address {
    return this[2].toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this[3].toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): Address {
    return this[6].toAddress();
  }
}

export class PaprController__auctionIDInputAuctionStruct extends ethereum.Tuple {
  get nftOwner(): Address {
    return this[0].toAddress();
  }

  get auctionAssetID(): BigInt {
    return this[1].toBigInt();
  }

  get auctionAssetContract(): Address {
    return this[2].toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this[3].toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): Address {
    return this[6].toAddress();
  }
}

export class PaprController__auctionStateResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class PaprController__buyAndReduceDebtInputParamsStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get minOut(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeTo(): Address {
    return this[3].toAddress();
  }

  get swapFeeBips(): BigInt {
    return this[4].toBigInt();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class PaprController__cachedPriceForAssetResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PaprController__increaseDebtAndSellInputParamsStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get minOut(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeTo(): Address {
    return this[3].toAddress();
  }

  get swapFeeBips(): BigInt {
    return this[4].toBigInt();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class PaprController__increaseDebtAndSellInputOracleInfoStruct extends ethereum.Tuple {
  get message(): PaprController__increaseDebtAndSellInputOracleInfoMessageStruct {
    return changetype<
      PaprController__increaseDebtAndSellInputOracleInfoMessageStruct
    >(this[0].toTuple());
  }

  get sig(): PaprController__increaseDebtAndSellInputOracleInfoSigStruct {
    return changetype<
      PaprController__increaseDebtAndSellInputOracleInfoSigStruct
    >(this[1].toTuple());
  }
}

export class PaprController__increaseDebtAndSellInputOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class PaprController__increaseDebtAndSellInputOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class PaprController__lastAuctionStartPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PaprController__startLiquidationAuctionResultAuctionStruct extends ethereum.Tuple {
  get nftOwner(): Address {
    return this[0].toAddress();
  }

  get auctionAssetID(): BigInt {
    return this[1].toBigInt();
  }

  get auctionAssetContract(): Address {
    return this[2].toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this[3].toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): Address {
    return this[6].toAddress();
  }
}

export class PaprController__startLiquidationAuctionInputCollateralStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class PaprController__startLiquidationAuctionInputOracleInfoStruct extends ethereum.Tuple {
  get message(): PaprController__startLiquidationAuctionInputOracleInfoMessageStruct {
    return changetype<
      PaprController__startLiquidationAuctionInputOracleInfoMessageStruct
    >(this[0].toTuple());
  }

  get sig(): PaprController__startLiquidationAuctionInputOracleInfoSigStruct {
    return changetype<
      PaprController__startLiquidationAuctionInputOracleInfoSigStruct
    >(this[1].toTuple());
  }
}

export class PaprController__startLiquidationAuctionInputOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class PaprController__startLiquidationAuctionInputOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class PaprController__underwritePriceForCollateralInputOracleInfoStruct extends ethereum.Tuple {
  get message(): PaprController__underwritePriceForCollateralInputOracleInfoMessageStruct {
    return changetype<
      PaprController__underwritePriceForCollateralInputOracleInfoMessageStruct
    >(this[0].toTuple());
  }

  get sig(): PaprController__underwritePriceForCollateralInputOracleInfoSigStruct {
    return changetype<
      PaprController__underwritePriceForCollateralInputOracleInfoSigStruct
    >(this[1].toTuple());
  }
}

export class PaprController__underwritePriceForCollateralInputOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class PaprController__underwritePriceForCollateralInputOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class PaprController__vaultInfoResultValue0Struct extends ethereum.Tuple {
  get count(): i32 {
    return this[0].toI32();
  }

  get auctionCount(): i32 {
    return this[1].toI32();
  }

  get latestAuctionStartTime(): BigInt {
    return this[2].toBigInt();
  }

  get debt(): BigInt {
    return this[3].toBigInt();
  }
}

export class PaprController extends ethereum.SmartContract {
  static bind(address: Address): PaprController {
    return new PaprController("PaprController", address);
  }

  MAX_PER_SECOND_PRICE_CHANGE(): BigInt {
    let result = super.call(
      "MAX_PER_SECOND_PRICE_CHANGE",
      "MAX_PER_SECOND_PRICE_CHANGE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_PER_SECOND_PRICE_CHANGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PER_SECOND_PRICE_CHANGE",
      "MAX_PER_SECOND_PRICE_CHANGE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionCreatorDiscountPercentWad(): BigInt {
    let result = super.call(
      "auctionCreatorDiscountPercentWad",
      "auctionCreatorDiscountPercentWad():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionCreatorDiscountPercentWad(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionCreatorDiscountPercentWad",
      "auctionCreatorDiscountPercentWad():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionCurrentPrice(
    auction: PaprController__auctionCurrentPriceInputAuctionStruct
  ): BigInt {
    let result = super.call(
      "auctionCurrentPrice",
      "auctionCurrentPrice((address,uint256,address,uint256,uint256,uint256,address)):(uint256)",
      [ethereum.Value.fromTuple(auction)]
    );

    return result[0].toBigInt();
  }

  try_auctionCurrentPrice(
    auction: PaprController__auctionCurrentPriceInputAuctionStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionCurrentPrice",
      "auctionCurrentPrice((address,uint256,address,uint256,uint256,uint256,address)):(uint256)",
      [ethereum.Value.fromTuple(auction)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionID(auction: PaprController__auctionIDInputAuctionStruct): BigInt {
    let result = super.call(
      "auctionID",
      "auctionID((address,uint256,address,uint256,uint256,uint256,address)):(uint256)",
      [ethereum.Value.fromTuple(auction)]
    );

    return result[0].toBigInt();
  }

  try_auctionID(
    auction: PaprController__auctionIDInputAuctionStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionID",
      "auctionID((address,uint256,address,uint256,uint256,uint256,address)):(uint256)",
      [ethereum.Value.fromTuple(auction)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionStartTime(id: BigInt): BigInt {
    let result = super.call(
      "auctionStartTime",
      "auctionStartTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_auctionStartTime(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionStartTime",
      "auctionStartTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionState(param0: BigInt): PaprController__auctionStateResult {
    let result = super.call(
      "auctionState",
      "auctionState(uint256):(uint96,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PaprController__auctionStateResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_auctionState(
    param0: BigInt
  ): ethereum.CallResult<PaprController__auctionStateResult> {
    let result = super.tryCall(
      "auctionState",
      "auctionState(uint256):(uint96,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaprController__auctionStateResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  buyAndReduceDebt(
    account: Address,
    collateralAsset: Address,
    params: PaprController__buyAndReduceDebtInputParamsStruct
  ): BigInt {
    let result = super.call(
      "buyAndReduceDebt",
      "buyAndReduceDebt(address,address,(uint256,uint256,uint160,address,uint256,uint256)):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(collateralAsset),
        ethereum.Value.fromTuple(params)
      ]
    );

    return result[0].toBigInt();
  }

  try_buyAndReduceDebt(
    account: Address,
    collateralAsset: Address,
    params: PaprController__buyAndReduceDebtInputParamsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyAndReduceDebt",
      "buyAndReduceDebt(address,address,(uint256,uint256,uint160,address,uint256,uint256)):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(collateralAsset),
        ethereum.Value.fromTuple(params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cachedPriceForAsset(
    param0: Address
  ): PaprController__cachedPriceForAssetResult {
    let result = super.call(
      "cachedPriceForAsset",
      "cachedPriceForAsset(address):(uint40,uint216)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PaprController__cachedPriceForAssetResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_cachedPriceForAsset(
    param0: Address
  ): ethereum.CallResult<PaprController__cachedPriceForAssetResult> {
    let result = super.tryCall(
      "cachedPriceForAsset",
      "cachedPriceForAsset(address):(uint40,uint216)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaprController__cachedPriceForAssetResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  collateralOwner(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "collateralOwner",
      "collateralOwner(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_collateralOwner(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralOwner",
      "collateralOwner(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundingPeriod(): BigInt {
    let result = super.call("fundingPeriod", "fundingPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fundingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundingPeriod",
      "fundingPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseDebtAndSell(
    proceedsTo: Address,
    collateralAsset: Address,
    params: PaprController__increaseDebtAndSellInputParamsStruct,
    oracleInfo: PaprController__increaseDebtAndSellInputOracleInfoStruct
  ): BigInt {
    let result = super.call(
      "increaseDebtAndSell",
      "increaseDebtAndSell(address,address,(uint256,uint256,uint160,address,uint256,uint256),((bytes32,bytes,uint256,bytes),(uint8,bytes32,bytes32))):(uint256)",
      [
        ethereum.Value.fromAddress(proceedsTo),
        ethereum.Value.fromAddress(collateralAsset),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromTuple(oracleInfo)
      ]
    );

    return result[0].toBigInt();
  }

  try_increaseDebtAndSell(
    proceedsTo: Address,
    collateralAsset: Address,
    params: PaprController__increaseDebtAndSellInputParamsStruct,
    oracleInfo: PaprController__increaseDebtAndSellInputOracleInfoStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "increaseDebtAndSell",
      "increaseDebtAndSell(address,address,(uint256,uint256,uint160,address,uint256,uint256),((bytes32,bytes,uint256,bytes),(uint8,bytes32,bytes32))):(uint256)",
      [
        ethereum.Value.fromAddress(proceedsTo),
        ethereum.Value.fromAddress(collateralAsset),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromTuple(oracleInfo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAllowed(param0: Address): boolean {
    let result = super.call("isAllowed", "isAllowed(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isAllowed(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAllowed", "isAllowed(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastAuctionStartPrice(
    param0: Address
  ): PaprController__lastAuctionStartPriceResult {
    let result = super.call(
      "lastAuctionStartPrice",
      "lastAuctionStartPrice(address):(uint40,uint216)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PaprController__lastAuctionStartPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_lastAuctionStartPrice(
    param0: Address
  ): ethereum.CallResult<PaprController__lastAuctionStartPriceResult> {
    let result = super.tryCall(
      "lastAuctionStartPrice",
      "lastAuctionStartPrice(address):(uint40,uint216)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaprController__lastAuctionStartPriceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  lastUpdated(): BigInt {
    let result = super.call("lastUpdated", "lastUpdated():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastUpdated", "lastUpdated():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationAuctionMinSpacing(): BigInt {
    let result = super.call(
      "liquidationAuctionMinSpacing",
      "liquidationAuctionMinSpacing():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationAuctionMinSpacing(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationAuctionMinSpacing",
      "liquidationAuctionMinSpacing():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mark(): BigInt {
    let result = super.call("mark", "mark():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mark(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mark", "mark():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxDebt(totalCollateraValue: BigInt): BigInt {
    let result = super.call("maxDebt", "maxDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(totalCollateraValue)
    ]);

    return result[0].toBigInt();
  }

  try_maxDebt(totalCollateraValue: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDebt", "maxDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(totalCollateraValue)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLTV(): BigInt {
    let result = super.call("maxLTV", "maxLTV():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxLTV(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxLTV", "maxLTV():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  newTarget(): BigInt {
    let result = super.call("newTarget", "newTarget():(uint256)", []);

    return result[0].toBigInt();
  }

  try_newTarget(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("newTarget", "newTarget():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    from: Address,
    _id: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    from: Address,
    _id: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  oracleSigner(): Address {
    let result = super.call("oracleSigner", "oracleSigner():(address)", []);

    return result[0].toAddress();
  }

  try_oracleSigner(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracleSigner", "oracleSigner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  papr(): Address {
    let result = super.call("papr", "papr():(address)", []);

    return result[0].toAddress();
  }

  try_papr(): ethereum.CallResult<Address> {
    let result = super.tryCall("papr", "papr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  startLiquidationAuction(
    account: Address,
    collateral: PaprController__startLiquidationAuctionInputCollateralStruct,
    oracleInfo: PaprController__startLiquidationAuctionInputOracleInfoStruct
  ): PaprController__startLiquidationAuctionResultAuctionStruct {
    let result = super.call(
      "startLiquidationAuction",
      "startLiquidationAuction(address,(address,uint256),((bytes32,bytes,uint256,bytes),(uint8,bytes32,bytes32))):((address,uint256,address,uint256,uint256,uint256,address))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromTuple(collateral),
        ethereum.Value.fromTuple(oracleInfo)
      ]
    );

    return changetype<
      PaprController__startLiquidationAuctionResultAuctionStruct
    >(result[0].toTuple());
  }

  try_startLiquidationAuction(
    account: Address,
    collateral: PaprController__startLiquidationAuctionInputCollateralStruct,
    oracleInfo: PaprController__startLiquidationAuctionInputOracleInfoStruct
  ): ethereum.CallResult<
    PaprController__startLiquidationAuctionResultAuctionStruct
  > {
    let result = super.tryCall(
      "startLiquidationAuction",
      "startLiquidationAuction(address,(address,uint256),((bytes32,bytes,uint256,bytes),(uint8,bytes32,bytes32))):((address,uint256,address,uint256,uint256,uint256,address))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromTuple(collateral),
        ethereum.Value.fromTuple(oracleInfo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PaprController__startLiquidationAuctionResultAuctionStruct>(
        value[0].toTuple()
      )
    );
  }

  target(): BigInt {
    let result = super.call("target", "target():(uint256)", []);

    return result[0].toBigInt();
  }

  try_target(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("target", "target():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underwritePriceForCollateral(
    asset: Address,
    priceKind: i32,
    oracleInfo: PaprController__underwritePriceForCollateralInputOracleInfoStruct,
    guard: boolean
  ): BigInt {
    let result = super.call(
      "underwritePriceForCollateral",
      "underwritePriceForCollateral(address,uint8,((bytes32,bytes,uint256,bytes),(uint8,bytes32,bytes32)),bool):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(priceKind)),
        ethereum.Value.fromTuple(oracleInfo),
        ethereum.Value.fromBoolean(guard)
      ]
    );

    return result[0].toBigInt();
  }

  try_underwritePriceForCollateral(
    asset: Address,
    priceKind: i32,
    oracleInfo: PaprController__underwritePriceForCollateralInputOracleInfoStruct,
    guard: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underwritePriceForCollateral",
      "underwritePriceForCollateral(address,uint8,((bytes32,bytes,uint256,bytes),(uint8,bytes32,bytes32)),bool):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(priceKind)),
        ethereum.Value.fromTuple(oracleInfo),
        ethereum.Value.fromBoolean(guard)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateTarget(): BigInt {
    let result = super.call("updateTarget", "updateTarget():(uint256)", []);

    return result[0].toBigInt();
  }

  try_updateTarget(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("updateTarget", "updateTarget():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultInfo(
    account: Address,
    asset: Address
  ): PaprController__vaultInfoResultValue0Struct {
    let result = super.call(
      "vaultInfo",
      "vaultInfo(address,address):((uint16,uint16,uint40,uint184))",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(asset)]
    );

    return changetype<PaprController__vaultInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_vaultInfo(
    account: Address,
    asset: Address
  ): ethereum.CallResult<PaprController__vaultInfoResultValue0Struct> {
    let result = super.tryCall(
      "vaultInfo",
      "vaultInfo(address,address):((uint16,uint16,uint40,uint184))",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PaprController__vaultInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _maxLTV(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get underlying(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get oracleSigner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get startingCollateral(): Array<Address> {
    return this._call.inputValues[5].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptProposedCollateralCall extends ethereum.Call {
  get inputs(): AcceptProposedCollateralCall__Inputs {
    return new AcceptProposedCollateralCall__Inputs(this);
  }

  get outputs(): AcceptProposedCollateralCall__Outputs {
    return new AcceptProposedCollateralCall__Outputs(this);
  }
}

export class AcceptProposedCollateralCall__Inputs {
  _call: AcceptProposedCollateralCall;

  constructor(call: AcceptProposedCollateralCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptProposedCollateralCall__Outputs {
  _call: AcceptProposedCollateralCall;

  constructor(call: AcceptProposedCollateralCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get collateralArr(): Array<AddCollateralCallCollateralArrStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      AddCollateralCallCollateralArrStruct
    >();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class AddCollateralCallCollateralArrStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class BuyAndReduceDebtCall extends ethereum.Call {
  get inputs(): BuyAndReduceDebtCall__Inputs {
    return new BuyAndReduceDebtCall__Inputs(this);
  }

  get outputs(): BuyAndReduceDebtCall__Outputs {
    return new BuyAndReduceDebtCall__Outputs(this);
  }
}

export class BuyAndReduceDebtCall__Inputs {
  _call: BuyAndReduceDebtCall;

  constructor(call: BuyAndReduceDebtCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateralAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get params(): BuyAndReduceDebtCallParamsStruct {
    return changetype<BuyAndReduceDebtCallParamsStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class BuyAndReduceDebtCall__Outputs {
  _call: BuyAndReduceDebtCall;

  constructor(call: BuyAndReduceDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyAndReduceDebtCallParamsStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get minOut(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeTo(): Address {
    return this[3].toAddress();
  }

  get swapFeeBips(): BigInt {
    return this[4].toBigInt();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class CancelProposedCollateralCall extends ethereum.Call {
  get inputs(): CancelProposedCollateralCall__Inputs {
    return new CancelProposedCollateralCall__Inputs(this);
  }

  get outputs(): CancelProposedCollateralCall__Outputs {
    return new CancelProposedCollateralCall__Outputs(this);
  }
}

export class CancelProposedCollateralCall__Inputs {
  _call: CancelProposedCollateralCall;

  constructor(call: CancelProposedCollateralCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CancelProposedCollateralCall__Outputs {
  _call: CancelProposedCollateralCall;

  constructor(call: CancelProposedCollateralCall) {
    this._call = call;
  }
}

export class IncreaseDebtCall extends ethereum.Call {
  get inputs(): IncreaseDebtCall__Inputs {
    return new IncreaseDebtCall__Inputs(this);
  }

  get outputs(): IncreaseDebtCall__Outputs {
    return new IncreaseDebtCall__Outputs(this);
  }
}

export class IncreaseDebtCall__Inputs {
  _call: IncreaseDebtCall;

  constructor(call: IncreaseDebtCall) {
    this._call = call;
  }

  get mintTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get oracleInfo(): IncreaseDebtCallOracleInfoStruct {
    return changetype<IncreaseDebtCallOracleInfoStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class IncreaseDebtCall__Outputs {
  _call: IncreaseDebtCall;

  constructor(call: IncreaseDebtCall) {
    this._call = call;
  }
}

export class IncreaseDebtCallOracleInfoStruct extends ethereum.Tuple {
  get message(): IncreaseDebtCallOracleInfoMessageStruct {
    return changetype<IncreaseDebtCallOracleInfoMessageStruct>(
      this[0].toTuple()
    );
  }

  get sig(): IncreaseDebtCallOracleInfoSigStruct {
    return changetype<IncreaseDebtCallOracleInfoSigStruct>(this[1].toTuple());
  }
}

export class IncreaseDebtCallOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class IncreaseDebtCallOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class IncreaseDebtAndSellCall extends ethereum.Call {
  get inputs(): IncreaseDebtAndSellCall__Inputs {
    return new IncreaseDebtAndSellCall__Inputs(this);
  }

  get outputs(): IncreaseDebtAndSellCall__Outputs {
    return new IncreaseDebtAndSellCall__Outputs(this);
  }
}

export class IncreaseDebtAndSellCall__Inputs {
  _call: IncreaseDebtAndSellCall;

  constructor(call: IncreaseDebtAndSellCall) {
    this._call = call;
  }

  get proceedsTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateralAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get params(): IncreaseDebtAndSellCallParamsStruct {
    return changetype<IncreaseDebtAndSellCallParamsStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get oracleInfo(): IncreaseDebtAndSellCallOracleInfoStruct {
    return changetype<IncreaseDebtAndSellCallOracleInfoStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class IncreaseDebtAndSellCall__Outputs {
  _call: IncreaseDebtAndSellCall;

  constructor(call: IncreaseDebtAndSellCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseDebtAndSellCallParamsStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get minOut(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }

  get swapFeeTo(): Address {
    return this[3].toAddress();
  }

  get swapFeeBips(): BigInt {
    return this[4].toBigInt();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class IncreaseDebtAndSellCallOracleInfoStruct extends ethereum.Tuple {
  get message(): IncreaseDebtAndSellCallOracleInfoMessageStruct {
    return changetype<IncreaseDebtAndSellCallOracleInfoMessageStruct>(
      this[0].toTuple()
    );
  }

  get sig(): IncreaseDebtAndSellCallOracleInfoSigStruct {
    return changetype<IncreaseDebtAndSellCallOracleInfoSigStruct>(
      this[1].toTuple()
    );
  }
}

export class IncreaseDebtAndSellCallOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class IncreaseDebtAndSellCallOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ProposeAllowedCollateralCall extends ethereum.Call {
  get inputs(): ProposeAllowedCollateralCall__Inputs {
    return new ProposeAllowedCollateralCall__Inputs(this);
  }

  get outputs(): ProposeAllowedCollateralCall__Outputs {
    return new ProposeAllowedCollateralCall__Outputs(this);
  }
}

export class ProposeAllowedCollateralCall__Inputs {
  _call: ProposeAllowedCollateralCall;

  constructor(call: ProposeAllowedCollateralCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProposeAllowedCollateralCall__Outputs {
  _call: ProposeAllowedCollateralCall;

  constructor(call: ProposeAllowedCollateralCall) {
    this._call = call;
  }
}

export class PurchaseLiquidationAuctionNFTCall extends ethereum.Call {
  get inputs(): PurchaseLiquidationAuctionNFTCall__Inputs {
    return new PurchaseLiquidationAuctionNFTCall__Inputs(this);
  }

  get outputs(): PurchaseLiquidationAuctionNFTCall__Outputs {
    return new PurchaseLiquidationAuctionNFTCall__Outputs(this);
  }
}

export class PurchaseLiquidationAuctionNFTCall__Inputs {
  _call: PurchaseLiquidationAuctionNFTCall;

  constructor(call: PurchaseLiquidationAuctionNFTCall) {
    this._call = call;
  }

  get auction(): PurchaseLiquidationAuctionNFTCallAuctionStruct {
    return changetype<PurchaseLiquidationAuctionNFTCallAuctionStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get maxPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sendTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get oracleInfo(): PurchaseLiquidationAuctionNFTCallOracleInfoStruct {
    return changetype<PurchaseLiquidationAuctionNFTCallOracleInfoStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class PurchaseLiquidationAuctionNFTCall__Outputs {
  _call: PurchaseLiquidationAuctionNFTCall;

  constructor(call: PurchaseLiquidationAuctionNFTCall) {
    this._call = call;
  }
}

export class PurchaseLiquidationAuctionNFTCallAuctionStruct extends ethereum.Tuple {
  get nftOwner(): Address {
    return this[0].toAddress();
  }

  get auctionAssetID(): BigInt {
    return this[1].toBigInt();
  }

  get auctionAssetContract(): Address {
    return this[2].toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this[3].toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): Address {
    return this[6].toAddress();
  }
}

export class PurchaseLiquidationAuctionNFTCallOracleInfoStruct extends ethereum.Tuple {
  get message(): PurchaseLiquidationAuctionNFTCallOracleInfoMessageStruct {
    return changetype<PurchaseLiquidationAuctionNFTCallOracleInfoMessageStruct>(
      this[0].toTuple()
    );
  }

  get sig(): PurchaseLiquidationAuctionNFTCallOracleInfoSigStruct {
    return changetype<PurchaseLiquidationAuctionNFTCallOracleInfoSigStruct>(
      this[1].toTuple()
    );
  }
}

export class PurchaseLiquidationAuctionNFTCallOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class PurchaseLiquidationAuctionNFTCallOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class ReduceDebtCall extends ethereum.Call {
  get inputs(): ReduceDebtCall__Inputs {
    return new ReduceDebtCall__Inputs(this);
  }

  get outputs(): ReduceDebtCall__Outputs {
    return new ReduceDebtCall__Outputs(this);
  }
}

export class ReduceDebtCall__Inputs {
  _call: ReduceDebtCall;

  constructor(call: ReduceDebtCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReduceDebtCall__Outputs {
  _call: ReduceDebtCall;

  constructor(call: ReduceDebtCall) {
    this._call = call;
  }
}

export class RemoveAllowedCollateralCall extends ethereum.Call {
  get inputs(): RemoveAllowedCollateralCall__Inputs {
    return new RemoveAllowedCollateralCall__Inputs(this);
  }

  get outputs(): RemoveAllowedCollateralCall__Outputs {
    return new RemoveAllowedCollateralCall__Outputs(this);
  }
}

export class RemoveAllowedCollateralCall__Inputs {
  _call: RemoveAllowedCollateralCall;

  constructor(call: RemoveAllowedCollateralCall) {
    this._call = call;
  }

  get assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveAllowedCollateralCall__Outputs {
  _call: RemoveAllowedCollateralCall;

  constructor(call: RemoveAllowedCollateralCall) {
    this._call = call;
  }
}

export class RemoveCollateralCall extends ethereum.Call {
  get inputs(): RemoveCollateralCall__Inputs {
    return new RemoveCollateralCall__Inputs(this);
  }

  get outputs(): RemoveCollateralCall__Outputs {
    return new RemoveCollateralCall__Outputs(this);
  }
}

export class RemoveCollateralCall__Inputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get sendTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateralArr(): Array<RemoveCollateralCallCollateralArrStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      RemoveCollateralCallCollateralArrStruct
    >();
  }

  get oracleInfo(): RemoveCollateralCallOracleInfoStruct {
    return changetype<RemoveCollateralCallOracleInfoStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class RemoveCollateralCall__Outputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }
}

export class RemoveCollateralCallCollateralArrStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class RemoveCollateralCallOracleInfoStruct extends ethereum.Tuple {
  get message(): RemoveCollateralCallOracleInfoMessageStruct {
    return changetype<RemoveCollateralCallOracleInfoMessageStruct>(
      this[0].toTuple()
    );
  }

  get sig(): RemoveCollateralCallOracleInfoSigStruct {
    return changetype<RemoveCollateralCallOracleInfoSigStruct>(
      this[1].toTuple()
    );
  }
}

export class RemoveCollateralCallOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class RemoveCollateralCallOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFundingPeriodCall extends ethereum.Call {
  get inputs(): SetFundingPeriodCall__Inputs {
    return new SetFundingPeriodCall__Inputs(this);
  }

  get outputs(): SetFundingPeriodCall__Outputs {
    return new SetFundingPeriodCall__Outputs(this);
  }
}

export class SetFundingPeriodCall__Inputs {
  _call: SetFundingPeriodCall;

  constructor(call: SetFundingPeriodCall) {
    this._call = call;
  }

  get _fundingPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFundingPeriodCall__Outputs {
  _call: SetFundingPeriodCall;

  constructor(call: SetFundingPeriodCall) {
    this._call = call;
  }
}

export class SetPoolCall extends ethereum.Call {
  get inputs(): SetPoolCall__Inputs {
    return new SetPoolCall__Inputs(this);
  }

  get outputs(): SetPoolCall__Outputs {
    return new SetPoolCall__Outputs(this);
  }
}

export class SetPoolCall__Inputs {
  _call: SetPoolCall;

  constructor(call: SetPoolCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPoolCall__Outputs {
  _call: SetPoolCall;

  constructor(call: SetPoolCall) {
    this._call = call;
  }
}

export class StartLiquidationAuctionCall extends ethereum.Call {
  get inputs(): StartLiquidationAuctionCall__Inputs {
    return new StartLiquidationAuctionCall__Inputs(this);
  }

  get outputs(): StartLiquidationAuctionCall__Outputs {
    return new StartLiquidationAuctionCall__Outputs(this);
  }
}

export class StartLiquidationAuctionCall__Inputs {
  _call: StartLiquidationAuctionCall;

  constructor(call: StartLiquidationAuctionCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateral(): StartLiquidationAuctionCallCollateralStruct {
    return changetype<StartLiquidationAuctionCallCollateralStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get oracleInfo(): StartLiquidationAuctionCallOracleInfoStruct {
    return changetype<StartLiquidationAuctionCallOracleInfoStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class StartLiquidationAuctionCall__Outputs {
  _call: StartLiquidationAuctionCall;

  constructor(call: StartLiquidationAuctionCall) {
    this._call = call;
  }

  get auction(): StartLiquidationAuctionCallAuctionStruct {
    return changetype<StartLiquidationAuctionCallAuctionStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class StartLiquidationAuctionCallCollateralStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class StartLiquidationAuctionCallOracleInfoStruct extends ethereum.Tuple {
  get message(): StartLiquidationAuctionCallOracleInfoMessageStruct {
    return changetype<StartLiquidationAuctionCallOracleInfoMessageStruct>(
      this[0].toTuple()
    );
  }

  get sig(): StartLiquidationAuctionCallOracleInfoSigStruct {
    return changetype<StartLiquidationAuctionCallOracleInfoSigStruct>(
      this[1].toTuple()
    );
  }
}

export class StartLiquidationAuctionCallOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class StartLiquidationAuctionCallOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class StartLiquidationAuctionCallAuctionStruct extends ethereum.Tuple {
  get nftOwner(): Address {
    return this[0].toAddress();
  }

  get auctionAssetID(): BigInt {
    return this[1].toBigInt();
  }

  get auctionAssetContract(): Address {
    return this[2].toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this[3].toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): Address {
    return this[6].toAddress();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnderwritePriceForCollateralCall extends ethereum.Call {
  get inputs(): UnderwritePriceForCollateralCall__Inputs {
    return new UnderwritePriceForCollateralCall__Inputs(this);
  }

  get outputs(): UnderwritePriceForCollateralCall__Outputs {
    return new UnderwritePriceForCollateralCall__Outputs(this);
  }
}

export class UnderwritePriceForCollateralCall__Inputs {
  _call: UnderwritePriceForCollateralCall;

  constructor(call: UnderwritePriceForCollateralCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get priceKind(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get oracleInfo(): UnderwritePriceForCollateralCallOracleInfoStruct {
    return changetype<UnderwritePriceForCollateralCallOracleInfoStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get guard(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class UnderwritePriceForCollateralCall__Outputs {
  _call: UnderwritePriceForCollateralCall;

  constructor(call: UnderwritePriceForCollateralCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnderwritePriceForCollateralCallOracleInfoStruct extends ethereum.Tuple {
  get message(): UnderwritePriceForCollateralCallOracleInfoMessageStruct {
    return changetype<UnderwritePriceForCollateralCallOracleInfoMessageStruct>(
      this[0].toTuple()
    );
  }

  get sig(): UnderwritePriceForCollateralCallOracleInfoSigStruct {
    return changetype<UnderwritePriceForCollateralCallOracleInfoSigStruct>(
      this[1].toTuple()
    );
  }
}

export class UnderwritePriceForCollateralCallOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class UnderwritePriceForCollateralCallOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class UniswapV3SwapCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3SwapCallbackCall__Inputs {
    return new UniswapV3SwapCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapCallbackCall__Outputs {
    return new UniswapV3SwapCallbackCall__Outputs(this);
  }
}

export class UniswapV3SwapCallbackCall__Inputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }

  get amount0Delta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Delta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3SwapCallbackCall__Outputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }
}

export class UpdateTargetCall extends ethereum.Call {
  get inputs(): UpdateTargetCall__Inputs {
    return new UpdateTargetCall__Inputs(this);
  }

  get outputs(): UpdateTargetCall__Outputs {
    return new UpdateTargetCall__Outputs(this);
  }
}

export class UpdateTargetCall__Inputs {
  _call: UpdateTargetCall;

  constructor(call: UpdateTargetCall) {
    this._call = call;
  }
}

export class UpdateTargetCall__Outputs {
  _call: UpdateTargetCall;

  constructor(call: UpdateTargetCall) {
    this._call = call;
  }

  get nTarget(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
