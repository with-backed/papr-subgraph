// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCollateral extends ethereum.Event {
  get params(): AddCollateral__Params {
    return new AddCollateral__Params(this);
  }
}

export class AddCollateral__Params {
  _event: AddCollateral;

  constructor(event: AddCollateral) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): AddCollateralCollateralStruct {
    return changetype<AddCollateralCollateralStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AddCollateralCollateralStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class ChangeCollateralAllowed extends ethereum.Event {
  get params(): ChangeCollateralAllowed__Params {
    return new ChangeCollateralAllowed__Params(this);
  }
}

export class ChangeCollateralAllowed__Params {
  _event: ChangeCollateralAllowed;

  constructor(event: ChangeCollateralAllowed) {
    this._event = event;
  }

  get arg(): ChangeCollateralAllowedArgStruct {
    return changetype<ChangeCollateralAllowedArgStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class ChangeCollateralAllowedArgStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get allowed(): boolean {
    return this[1].toBoolean();
  }
}

export class EndAuction extends ethereum.Event {
  get params(): EndAuction__Params {
    return new EndAuction__Params(this);
  }
}

export class EndAuction__Params {
  _event: EndAuction;

  constructor(event: EndAuction) {
    this._event = event;
  }

  get auctionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IncreaseDebt extends ethereum.Event {
  get params(): IncreaseDebt__Params {
    return new IncreaseDebt__Params(this);
  }
}

export class IncreaseDebt__Params {
  _event: IncreaseDebt;

  constructor(event: IncreaseDebt) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReduceDebt extends ethereum.Event {
  get params(): ReduceDebt__Params {
    return new ReduceDebt__Params(this);
  }
}

export class ReduceDebt__Params {
  _event: ReduceDebt;

  constructor(event: ReduceDebt) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemoveCollateral extends ethereum.Event {
  get params(): RemoveCollateral__Params {
    return new RemoveCollateral__Params(this);
  }
}

export class RemoveCollateral__Params {
  _event: RemoveCollateral;

  constructor(event: RemoveCollateral) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): RemoveCollateralCollateralStruct {
    return changetype<RemoveCollateralCollateralStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get vaultCollateralValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RemoveCollateralCollateralStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class StartAuction extends ethereum.Event {
  get params(): StartAuction__Params {
    return new StartAuction__Params(this);
  }
}

export class StartAuction__Params {
  _event: StartAuction;

  constructor(event: StartAuction) {
    this._event = event;
  }

  get auctionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auctionAssetID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get auctionAssetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get startPrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get paymentAsset(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class UpdateNormalization extends ethereum.Event {
  get params(): UpdateNormalization__Params {
    return new UpdateNormalization__Params(this);
  }
}

export class UpdateNormalization__Params {
  _event: UpdateNormalization;

  constructor(event: UpdateNormalization) {
    this._event = event;
  }

  get newNorm(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LendingStrategy__auctionCurrentPriceInputAuctionStruct extends ethereum.Tuple {
  get nftOwner(): Address {
    return this[0].toAddress();
  }

  get auctionAssetID(): BigInt {
    return this[1].toBigInt();
  }

  get auctionAssetContract(): Address {
    return this[2].toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this[3].toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): Address {
    return this[6].toAddress();
  }
}

export class LendingStrategy__auctionIDInputAuctionStruct extends ethereum.Tuple {
  get nftOwner(): Address {
    return this[0].toAddress();
  }

  get auctionAssetID(): BigInt {
    return this[1].toBigInt();
  }

  get auctionAssetContract(): Address {
    return this[2].toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this[3].toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): Address {
    return this[6].toAddress();
  }
}

export class LendingStrategy__auctionStateResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class LendingStrategy__collateralHashInputCollateralStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class LendingStrategy__startLiquidationAuctionResultAuctionStruct extends ethereum.Tuple {
  get nftOwner(): Address {
    return this[0].toAddress();
  }

  get auctionAssetID(): BigInt {
    return this[1].toBigInt();
  }

  get auctionAssetContract(): Address {
    return this[2].toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this[3].toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): Address {
    return this[6].toAddress();
  }
}

export class LendingStrategy__startLiquidationAuctionInputCollateralStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class LendingStrategy__underwritePriceForCollateralInputOracleInfoStruct extends ethereum.Tuple {
  get message(): LendingStrategy__underwritePriceForCollateralInputOracleInfoMessageStruct {
    return changetype<
      LendingStrategy__underwritePriceForCollateralInputOracleInfoMessageStruct
    >(this[0].toTuple());
  }

  get sig(): LendingStrategy__underwritePriceForCollateralInputOracleInfoSigStruct {
    return changetype<
      LendingStrategy__underwritePriceForCollateralInputOracleInfoSigStruct
    >(this[1].toTuple());
  }
}

export class LendingStrategy__underwritePriceForCollateralInputOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class LendingStrategy__underwritePriceForCollateralInputOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class LendingStrategy__vaultInfoResultValue0Struct extends ethereum.Tuple {
  get latestAuctionStartTime(): BigInt {
    return this[0].toBigInt();
  }

  get debt(): BigInt {
    return this[1].toBigInt();
  }

  get collateralValue(): BigInt {
    return this[2].toBigInt();
  }
}

export class LendingStrategy extends ethereum.SmartContract {
  static bind(address: Address): LendingStrategy {
    return new LendingStrategy("LendingStrategy", address);
  }

  PERIOD(): BigInt {
    let result = super.call("PERIOD", "PERIOD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PERIOD", "PERIOD():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionCreatorDiscountPercentWad(): BigInt {
    let result = super.call(
      "auctionCreatorDiscountPercentWad",
      "auctionCreatorDiscountPercentWad():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionCreatorDiscountPercentWad(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionCreatorDiscountPercentWad",
      "auctionCreatorDiscountPercentWad():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionCurrentPrice(
    auction: LendingStrategy__auctionCurrentPriceInputAuctionStruct
  ): BigInt {
    let result = super.call(
      "auctionCurrentPrice",
      "auctionCurrentPrice((address,uint256,address,uint256,uint256,uint256,address)):(uint256)",
      [ethereum.Value.fromTuple(auction)]
    );

    return result[0].toBigInt();
  }

  try_auctionCurrentPrice(
    auction: LendingStrategy__auctionCurrentPriceInputAuctionStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionCurrentPrice",
      "auctionCurrentPrice((address,uint256,address,uint256,uint256,uint256,address)):(uint256)",
      [ethereum.Value.fromTuple(auction)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionDecayPeriod(): BigInt {
    let result = super.call(
      "auctionDecayPeriod",
      "auctionDecayPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionDecayPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionDecayPeriod",
      "auctionDecayPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionID(auction: LendingStrategy__auctionIDInputAuctionStruct): BigInt {
    let result = super.call(
      "auctionID",
      "auctionID((address,uint256,address,uint256,uint256,uint256,address)):(uint256)",
      [ethereum.Value.fromTuple(auction)]
    );

    return result[0].toBigInt();
  }

  try_auctionID(
    auction: LendingStrategy__auctionIDInputAuctionStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionID",
      "auctionID((address,uint256,address,uint256,uint256,uint256,address)):(uint256)",
      [ethereum.Value.fromTuple(auction)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionStartPriceMultiplier(): BigInt {
    let result = super.call(
      "auctionStartPriceMultiplier",
      "auctionStartPriceMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionStartPriceMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionStartPriceMultiplier",
      "auctionStartPriceMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionStartTime(id: BigInt): BigInt {
    let result = super.call(
      "auctionStartTime",
      "auctionStartTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_auctionStartTime(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionStartTime",
      "auctionStartTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionState(param0: BigInt): LendingStrategy__auctionStateResult {
    let result = super.call(
      "auctionState",
      "auctionState(uint256):(uint96,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LendingStrategy__auctionStateResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_auctionState(
    param0: BigInt
  ): ethereum.CallResult<LendingStrategy__auctionStateResult> {
    let result = super.tryCall(
      "auctionState",
      "auctionState(uint256):(uint96,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LendingStrategy__auctionStateResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  buyAndReduceDebt(
    account: Address,
    underlyingAmount: BigInt,
    minOut: BigInt,
    sqrtPriceLimitX96: BigInt,
    proceedsTo: Address
  ): BigInt {
    let result = super.call(
      "buyAndReduceDebt",
      "buyAndReduceDebt(address,uint256,uint256,uint160,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(underlyingAmount),
        ethereum.Value.fromUnsignedBigInt(minOut),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96),
        ethereum.Value.fromAddress(proceedsTo)
      ]
    );

    return result[0].toBigInt();
  }

  try_buyAndReduceDebt(
    account: Address,
    underlyingAmount: BigInt,
    minOut: BigInt,
    sqrtPriceLimitX96: BigInt,
    proceedsTo: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyAndReduceDebt",
      "buyAndReduceDebt(address,uint256,uint256,uint160,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(underlyingAmount),
        ethereum.Value.fromUnsignedBigInt(minOut),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96),
        ethereum.Value.fromAddress(proceedsTo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralFrozenOraclePrice(param0: Bytes): BigInt {
    let result = super.call(
      "collateralFrozenOraclePrice",
      "collateralFrozenOraclePrice(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_collateralFrozenOraclePrice(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralFrozenOraclePrice",
      "collateralFrozenOraclePrice(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralHash(
    collateral: LendingStrategy__collateralHashInputCollateralStruct,
    account: Address
  ): Bytes {
    let result = super.call(
      "collateralHash",
      "collateralHash((address,uint256),address):(bytes32)",
      [
        ethereum.Value.fromTuple(collateral),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBytes();
  }

  try_collateralHash(
    collateral: LendingStrategy__collateralHashInputCollateralStruct,
    account: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "collateralHash",
      "collateralHash((address,uint256),address):(bytes32)",
      [
        ethereum.Value.fromTuple(collateral),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isAllowed(param0: Address): boolean {
    let result = super.call("isAllowed", "isAllowed(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isAllowed(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAllowed", "isAllowed(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastUpdated(): BigInt {
    let result = super.call("lastUpdated", "lastUpdated():(uint72)", []);

    return result[0].toBigInt();
  }

  try_lastUpdated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastUpdated", "lastUpdated():(uint72)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationAuctionMinSpacing(): BigInt {
    let result = super.call(
      "liquidationAuctionMinSpacing",
      "liquidationAuctionMinSpacing():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationAuctionMinSpacing(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationAuctionMinSpacing",
      "liquidationAuctionMinSpacing():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationPenaltyBips(): BigInt {
    let result = super.call(
      "liquidationPenaltyBips",
      "liquidationPenaltyBips():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationPenaltyBips(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationPenaltyBips",
      "liquidationPenaltyBips():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationPrice(account: Address): BigInt {
    let result = super.call(
      "liquidationPrice",
      "liquidationPrice(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_liquidationPrice(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationPrice",
      "liquidationPrice(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  markTwapSinceLastUpdate(): BigInt {
    let result = super.call(
      "markTwapSinceLastUpdate",
      "markTwapSinceLastUpdate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_markTwapSinceLastUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "markTwapSinceLastUpdate",
      "markTwapSinceLastUpdate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxDebt(collateralValue: BigInt): BigInt {
    let result = super.call("maxDebt", "maxDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(collateralValue)
    ]);

    return result[0].toBigInt();
  }

  try_maxDebt(collateralValue: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDebt", "maxDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(collateralValue)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLTV(): BigInt {
    let result = super.call("maxLTV", "maxLTV():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxLTV(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxLTV", "maxLTV():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintAndSellDebt(
    debt: BigInt,
    minOut: BigInt,
    sqrtPriceLimitX96: BigInt,
    proceedsTo: Address
  ): BigInt {
    let result = super.call(
      "mintAndSellDebt",
      "mintAndSellDebt(uint256,uint256,uint160,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(debt),
        ethereum.Value.fromUnsignedBigInt(minOut),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96),
        ethereum.Value.fromAddress(proceedsTo)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintAndSellDebt(
    debt: BigInt,
    minOut: BigInt,
    sqrtPriceLimitX96: BigInt,
    proceedsTo: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintAndSellDebt",
      "mintAndSellDebt(uint256,uint256,uint160,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(debt),
        ethereum.Value.fromUnsignedBigInt(minOut),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96),
        ethereum.Value.fromAddress(proceedsTo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  multiplier(): BigInt {
    let result = super.call("multiplier", "multiplier():(int256)", []);

    return result[0].toBigInt();
  }

  try_multiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("multiplier", "multiplier():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  newNorm(): BigInt {
    let result = super.call("newNorm", "newNorm():(uint256)", []);

    return result[0].toBigInt();
  }

  try_newNorm(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("newNorm", "newNorm():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  normalization(): BigInt {
    let result = super.call("normalization", "normalization():(uint128)", []);

    return result[0].toBigInt();
  }

  try_normalization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "normalization",
      "normalization():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    from: Address,
    param1: Address,
    _id: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    from: Address,
    param1: Address,
    _id: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  oracleSigner(): Address {
    let result = super.call("oracleSigner", "oracleSigner():(address)", []);

    return result[0].toAddress();
  }

  try_oracleSigner(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracleSigner", "oracleSigner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  perPeriodAuctionDecayWAD(): BigInt {
    let result = super.call(
      "perPeriodAuctionDecayWAD",
      "perPeriodAuctionDecayWAD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_perPeriodAuctionDecayWAD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "perPeriodAuctionDecayWAD",
      "perPeriodAuctionDecayWAD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  perpetual(): Address {
    let result = super.call("perpetual", "perpetual():(address)", []);

    return result[0].toAddress();
  }

  try_perpetual(): ethereum.CallResult<Address> {
    let result = super.tryCall("perpetual", "perpetual():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quoteCurrency(): Address {
    let result = super.call("quoteCurrency", "quoteCurrency():(address)", []);

    return result[0].toAddress();
  }

  try_quoteCurrency(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "quoteCurrency",
      "quoteCurrency():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  start(): BigInt {
    let result = super.call("start", "start():(uint256)", []);

    return result[0].toBigInt();
  }

  try_start(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("start", "start():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startLiquidationAuction(
    account: Address,
    collateral: LendingStrategy__startLiquidationAuctionInputCollateralStruct
  ): LendingStrategy__startLiquidationAuctionResultAuctionStruct {
    let result = super.call(
      "startLiquidationAuction",
      "startLiquidationAuction(address,(address,uint256)):((address,uint256,address,uint256,uint256,uint256,address))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromTuple(collateral)
      ]
    );

    return changetype<
      LendingStrategy__startLiquidationAuctionResultAuctionStruct
    >(result[0].toTuple());
  }

  try_startLiquidationAuction(
    account: Address,
    collateral: LendingStrategy__startLiquidationAuctionInputCollateralStruct
  ): ethereum.CallResult<
    LendingStrategy__startLiquidationAuctionResultAuctionStruct
  > {
    let result = super.tryCall(
      "startLiquidationAuction",
      "startLiquidationAuction(address,(address,uint256)):((address,uint256,address,uint256,uint256,uint256,address))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromTuple(collateral)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LendingStrategy__startLiquidationAuctionResultAuctionStruct>(
        value[0].toTuple()
      )
    );
  }

  token0IsUnderlying(): boolean {
    let result = super.call(
      "token0IsUnderlying",
      "token0IsUnderlying():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_token0IsUnderlying(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "token0IsUnderlying",
      "token0IsUnderlying():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underwritePriceForCollateral(
    tokenId: BigInt,
    contractAddress: Address,
    oracleInfo: LendingStrategy__underwritePriceForCollateralInputOracleInfoStruct
  ): BigInt {
    let result = super.call(
      "underwritePriceForCollateral",
      "underwritePriceForCollateral(uint256,address,((bytes32,bytes,uint256,bytes),(uint8,bytes32,bytes32))):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromTuple(oracleInfo)
      ]
    );

    return result[0].toBigInt();
  }

  try_underwritePriceForCollateral(
    tokenId: BigInt,
    contractAddress: Address,
    oracleInfo: LendingStrategy__underwritePriceForCollateralInputOracleInfoStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underwritePriceForCollateral",
      "underwritePriceForCollateral(uint256,address,((bytes32,bytes,uint256,bytes),(uint8,bytes32,bytes32))):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromTuple(oracleInfo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateNormalization(): BigInt {
    let result = super.call(
      "updateNormalization",
      "updateNormalization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_updateNormalization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateNormalization",
      "updateNormalization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultIdentifier(nonce: BigInt, account: Address): BigInt {
    let result = super.call(
      "vaultIdentifier",
      "vaultIdentifier(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_vaultIdentifier(
    nonce: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultIdentifier",
      "vaultIdentifier(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultInfo(account: Address): LendingStrategy__vaultInfoResultValue0Struct {
    let result = super.call(
      "vaultInfo",
      "vaultInfo(address):((uint40,uint96,uint96))",
      [ethereum.Value.fromAddress(account)]
    );

    return changetype<LendingStrategy__vaultInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_vaultInfo(
    account: Address
  ): ethereum.CallResult<LendingStrategy__vaultInfoResultValue0Struct> {
    let result = super.tryCall(
      "vaultInfo",
      "vaultInfo(address):((uint40,uint96,uint96))",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LendingStrategy__vaultInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get maxLTV(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get indexMarkRatioMax(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get indexMarkRatioMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get underlying(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get oracleSigner(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get collateral(): AddCollateralCallCollateralStruct {
    return changetype<AddCollateralCallCollateralStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get oracleInfo(): AddCollateralCallOracleInfoStruct {
    return changetype<AddCollateralCallOracleInfoStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class AddCollateralCallCollateralStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class AddCollateralCallOracleInfoStruct extends ethereum.Tuple {
  get message(): AddCollateralCallOracleInfoMessageStruct {
    return changetype<AddCollateralCallOracleInfoMessageStruct>(
      this[0].toTuple()
    );
  }

  get sig(): AddCollateralCallOracleInfoSigStruct {
    return changetype<AddCollateralCallOracleInfoSigStruct>(this[1].toTuple());
  }
}

export class AddCollateralCallOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class AddCollateralCallOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class AddCollateralWithCallbackCall extends ethereum.Call {
  get inputs(): AddCollateralWithCallbackCall__Inputs {
    return new AddCollateralWithCallbackCall__Inputs(this);
  }

  get outputs(): AddCollateralWithCallbackCall__Outputs {
    return new AddCollateralWithCallbackCall__Outputs(this);
  }
}

export class AddCollateralWithCallbackCall__Inputs {
  _call: AddCollateralWithCallbackCall;

  constructor(call: AddCollateralWithCallbackCall) {
    this._call = call;
  }

  get collateral(): AddCollateralWithCallbackCallCollateralStruct {
    return changetype<AddCollateralWithCallbackCallCollateralStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get oracleInfo(): AddCollateralWithCallbackCallOracleInfoStruct {
    return changetype<AddCollateralWithCallbackCallOracleInfoStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AddCollateralWithCallbackCall__Outputs {
  _call: AddCollateralWithCallbackCall;

  constructor(call: AddCollateralWithCallbackCall) {
    this._call = call;
  }
}

export class AddCollateralWithCallbackCallCollateralStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class AddCollateralWithCallbackCallOracleInfoStruct extends ethereum.Tuple {
  get message(): AddCollateralWithCallbackCallOracleInfoMessageStruct {
    return changetype<AddCollateralWithCallbackCallOracleInfoMessageStruct>(
      this[0].toTuple()
    );
  }

  get sig(): AddCollateralWithCallbackCallOracleInfoSigStruct {
    return changetype<AddCollateralWithCallbackCallOracleInfoSigStruct>(
      this[1].toTuple()
    );
  }
}

export class AddCollateralWithCallbackCallOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class AddCollateralWithCallbackCallOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class BuyAndReduceDebtCall extends ethereum.Call {
  get inputs(): BuyAndReduceDebtCall__Inputs {
    return new BuyAndReduceDebtCall__Inputs(this);
  }

  get outputs(): BuyAndReduceDebtCall__Outputs {
    return new BuyAndReduceDebtCall__Outputs(this);
  }
}

export class BuyAndReduceDebtCall__Inputs {
  _call: BuyAndReduceDebtCall;

  constructor(call: BuyAndReduceDebtCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get underlyingAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get proceedsTo(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class BuyAndReduceDebtCall__Outputs {
  _call: BuyAndReduceDebtCall;

  constructor(call: BuyAndReduceDebtCall) {
    this._call = call;
  }

  get out(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class IncreaseDebtCall extends ethereum.Call {
  get inputs(): IncreaseDebtCall__Inputs {
    return new IncreaseDebtCall__Inputs(this);
  }

  get outputs(): IncreaseDebtCall__Outputs {
    return new IncreaseDebtCall__Outputs(this);
  }
}

export class IncreaseDebtCall__Inputs {
  _call: IncreaseDebtCall;

  constructor(call: IncreaseDebtCall) {
    this._call = call;
  }

  get mintTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseDebtCall__Outputs {
  _call: IncreaseDebtCall;

  constructor(call: IncreaseDebtCall) {
    this._call = call;
  }
}

export class MintAndSellDebtCall extends ethereum.Call {
  get inputs(): MintAndSellDebtCall__Inputs {
    return new MintAndSellDebtCall__Inputs(this);
  }

  get outputs(): MintAndSellDebtCall__Outputs {
    return new MintAndSellDebtCall__Outputs(this);
  }
}

export class MintAndSellDebtCall__Inputs {
  _call: MintAndSellDebtCall;

  constructor(call: MintAndSellDebtCall) {
    this._call = call;
  }

  get debt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get proceedsTo(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class MintAndSellDebtCall__Outputs {
  _call: MintAndSellDebtCall;

  constructor(call: MintAndSellDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PurchaseLiquidationAuctionNFTCall extends ethereum.Call {
  get inputs(): PurchaseLiquidationAuctionNFTCall__Inputs {
    return new PurchaseLiquidationAuctionNFTCall__Inputs(this);
  }

  get outputs(): PurchaseLiquidationAuctionNFTCall__Outputs {
    return new PurchaseLiquidationAuctionNFTCall__Outputs(this);
  }
}

export class PurchaseLiquidationAuctionNFTCall__Inputs {
  _call: PurchaseLiquidationAuctionNFTCall;

  constructor(call: PurchaseLiquidationAuctionNFTCall) {
    this._call = call;
  }

  get auction(): PurchaseLiquidationAuctionNFTCallAuctionStruct {
    return changetype<PurchaseLiquidationAuctionNFTCallAuctionStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get maxPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sendTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class PurchaseLiquidationAuctionNFTCall__Outputs {
  _call: PurchaseLiquidationAuctionNFTCall;

  constructor(call: PurchaseLiquidationAuctionNFTCall) {
    this._call = call;
  }
}

export class PurchaseLiquidationAuctionNFTCallAuctionStruct extends ethereum.Tuple {
  get nftOwner(): Address {
    return this[0].toAddress();
  }

  get auctionAssetID(): BigInt {
    return this[1].toBigInt();
  }

  get auctionAssetContract(): Address {
    return this[2].toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this[3].toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): Address {
    return this[6].toAddress();
  }
}

export class ReduceDebtCall extends ethereum.Call {
  get inputs(): ReduceDebtCall__Inputs {
    return new ReduceDebtCall__Inputs(this);
  }

  get outputs(): ReduceDebtCall__Outputs {
    return new ReduceDebtCall__Outputs(this);
  }
}

export class ReduceDebtCall__Inputs {
  _call: ReduceDebtCall;

  constructor(call: ReduceDebtCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReduceDebtCall__Outputs {
  _call: ReduceDebtCall;

  constructor(call: ReduceDebtCall) {
    this._call = call;
  }
}

export class RemoveCollateralCall extends ethereum.Call {
  get inputs(): RemoveCollateralCall__Inputs {
    return new RemoveCollateralCall__Inputs(this);
  }

  get outputs(): RemoveCollateralCall__Outputs {
    return new RemoveCollateralCall__Outputs(this);
  }
}

export class RemoveCollateralCall__Inputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get sendTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateral(): RemoveCollateralCallCollateralStruct {
    return changetype<RemoveCollateralCallCollateralStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class RemoveCollateralCall__Outputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }
}

export class RemoveCollateralCallCollateralStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetAllowedCollateralCall extends ethereum.Call {
  get inputs(): SetAllowedCollateralCall__Inputs {
    return new SetAllowedCollateralCall__Inputs(this);
  }

  get outputs(): SetAllowedCollateralCall__Outputs {
    return new SetAllowedCollateralCall__Outputs(this);
  }
}

export class SetAllowedCollateralCall__Inputs {
  _call: SetAllowedCollateralCall;

  constructor(call: SetAllowedCollateralCall) {
    this._call = call;
  }

  get args(): Array<SetAllowedCollateralCallArgsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetAllowedCollateralCallArgsStruct
    >();
  }
}

export class SetAllowedCollateralCall__Outputs {
  _call: SetAllowedCollateralCall;

  constructor(call: SetAllowedCollateralCall) {
    this._call = call;
  }
}

export class SetAllowedCollateralCallArgsStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get allowed(): boolean {
    return this[1].toBoolean();
  }
}

export class StartLiquidationAuctionCall extends ethereum.Call {
  get inputs(): StartLiquidationAuctionCall__Inputs {
    return new StartLiquidationAuctionCall__Inputs(this);
  }

  get outputs(): StartLiquidationAuctionCall__Outputs {
    return new StartLiquidationAuctionCall__Outputs(this);
  }
}

export class StartLiquidationAuctionCall__Inputs {
  _call: StartLiquidationAuctionCall;

  constructor(call: StartLiquidationAuctionCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateral(): StartLiquidationAuctionCallCollateralStruct {
    return changetype<StartLiquidationAuctionCallCollateralStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class StartLiquidationAuctionCall__Outputs {
  _call: StartLiquidationAuctionCall;

  constructor(call: StartLiquidationAuctionCall) {
    this._call = call;
  }

  get auction(): StartLiquidationAuctionCallAuctionStruct {
    return changetype<StartLiquidationAuctionCallAuctionStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class StartLiquidationAuctionCallCollateralStruct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }
}

export class StartLiquidationAuctionCallAuctionStruct extends ethereum.Tuple {
  get nftOwner(): Address {
    return this[0].toAddress();
  }

  get auctionAssetID(): BigInt {
    return this[1].toBigInt();
  }

  get auctionAssetContract(): Address {
    return this[2].toAddress();
  }

  get perPeriodDecayPercentWad(): BigInt {
    return this[3].toBigInt();
  }

  get secondsInPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get startPrice(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): Address {
    return this[6].toAddress();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get direct(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get renounce(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnderwritePriceForCollateralCall extends ethereum.Call {
  get inputs(): UnderwritePriceForCollateralCall__Inputs {
    return new UnderwritePriceForCollateralCall__Inputs(this);
  }

  get outputs(): UnderwritePriceForCollateralCall__Outputs {
    return new UnderwritePriceForCollateralCall__Outputs(this);
  }
}

export class UnderwritePriceForCollateralCall__Inputs {
  _call: UnderwritePriceForCollateralCall;

  constructor(call: UnderwritePriceForCollateralCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get oracleInfo(): UnderwritePriceForCollateralCallOracleInfoStruct {
    return changetype<UnderwritePriceForCollateralCallOracleInfoStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class UnderwritePriceForCollateralCall__Outputs {
  _call: UnderwritePriceForCollateralCall;

  constructor(call: UnderwritePriceForCollateralCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnderwritePriceForCollateralCallOracleInfoStruct extends ethereum.Tuple {
  get message(): UnderwritePriceForCollateralCallOracleInfoMessageStruct {
    return changetype<UnderwritePriceForCollateralCallOracleInfoMessageStruct>(
      this[0].toTuple()
    );
  }

  get sig(): UnderwritePriceForCollateralCallOracleInfoSigStruct {
    return changetype<UnderwritePriceForCollateralCallOracleInfoSigStruct>(
      this[1].toTuple()
    );
  }
}

export class UnderwritePriceForCollateralCallOracleInfoMessageStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get payload(): Bytes {
    return this[1].toBytes();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class UnderwritePriceForCollateralCallOracleInfoSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class UniswapV3SwapCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3SwapCallbackCall__Inputs {
    return new UniswapV3SwapCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapCallbackCall__Outputs {
    return new UniswapV3SwapCallbackCall__Outputs(this);
  }
}

export class UniswapV3SwapCallbackCall__Inputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }

  get amount0Delta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Delta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3SwapCallbackCall__Outputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }
}

export class UpdateNormalizationCall extends ethereum.Call {
  get inputs(): UpdateNormalizationCall__Inputs {
    return new UpdateNormalizationCall__Inputs(this);
  }

  get outputs(): UpdateNormalizationCall__Outputs {
    return new UpdateNormalizationCall__Outputs(this);
  }
}

export class UpdateNormalizationCall__Inputs {
  _call: UpdateNormalizationCall;

  constructor(call: UpdateNormalizationCall) {
    this._call = call;
  }
}

export class UpdateNormalizationCall__Outputs {
  _call: UpdateNormalizationCall;

  constructor(call: UpdateNormalizationCall) {
    this._call = call;
  }

  get newNormalization(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
